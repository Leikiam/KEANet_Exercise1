We have designed our test cases so that we have 100% decision coverage and 100% statement.
Our test cases can be seen where our xUnit tests are getting the provided data to be tested in our test project, in the class called “Test.cs”.
The reason we chose Equivalence Partitioning and Boundary Value Analysis as our Blackbox techniques was
because we believe these are the most relevant for our project. We did not choose Decision table testing, State transition diagram and 
Use case diagram because our project did not fulfill the prerequisites that these techniques required. The only exception might be the Use
case diagram but we still did not believe it would help us as we do not need to know the interaction between our use cases and external actors.
In the text below, we decided to specify what kind of data we would like to test in our xUnit tests.

Equivalence Partitioning
Test: IncrementPhoneLineNumber()
Valid equivalence partitions = 0 to 4
Non-valid equivalence partitions = < 0,  > 4

Test: Buy()
Valid equivalence partitions =  < -1, 0,  > 1
Non-valid equivalence partitions =  N/A

Boundary Value Analysis 
Test: IncrementPhoneLineNumber()
Boundary values = -1, 0, 1, 7, 8, 9

Test: Buy()
Boundary values = -1, 0, 1, int.Max()

